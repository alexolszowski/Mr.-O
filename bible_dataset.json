from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import json

# Load the dataset
with open("bible_dataset.json", "r") as f:
    bible_data = json.load(f)

app = FastAPI()

class Query(BaseModel):
    question: str

@app.get("/")
def home():
    return {"message": "Welcome to Jesus AI Biblical Chatbot!"}

@app.post("/ask")
def ask_question(query: Query):
    matched_references = {ref: verse for ref, verse in bible_data.items() if query.question.lower() in verse.lower()}
    if not matched_references:
        return {"question": query.question, "answer": "Sorry, no matching biblical references found."}
    response = [{"reference": k, "verse": v} for k, v in matched_references.items()][:3]
    return {"question": query.question, "matches": response}

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import json

# Load the dataset
with open("bible_dataset.json", "r") as f:
    bible_data = json.load(f)

app = FastAPI()

class Query(BaseModel):
    question: str

@app.get("/")
def home():
    return {"message": "Welcome to Jesus AI Biblical Chatbot!"}

@app.post("/ask")
def ask_question(query: Query):
    matched_references = {ref: verse for ref, verse in bible_data.items() if query.question.lower() in verse.lower()}
    if not matched_references:
        return {"question": query.question, "answer": "Sorry, no matching biblical references found."}
    response = [{"reference": k, "verse": v} for k, v in matched_references.items()][:3]
    return {"question": query.question, "matches": response}
